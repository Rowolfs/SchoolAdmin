generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  roleId     Int
  name       String
  surname    String
  patronymic String

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  role       Role      @relation(fields: [roleId], references: [id], onDelete: Restrict)
  teacher    Teacher?  @relation("UserTeacher")
  pupil      Pupil?    @relation("UserPupil")
}

model Role {
  id         Int       @id @default(autoincrement())
  name       String    @unique

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  users      User[]
}

model Class {
  id           Int                     @id @default(autoincrement())
  classTeacher Int?      @unique

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  teacher      Teacher?   @relation("ClassTeacher", fields: [classTeacher], references: [id], onDelete: SetNull)
  pupils       Pupil[]
  disciplines  ClassesDisciplines[]
}

model Teacher {
  id              Int                    @id @default(autoincrement())
  userId          Int                    @unique
  classroomNumber String?

  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  deletedAt       DateTime?

  user            User                   @relation("UserTeacher", fields: [userId], references: [id], onDelete: Cascade)
  classClass      Class?                 @relation("ClassTeacher")
  disciplines     TeachersDisciplines[]
}

model Pupil {
  id         Int                    @id @default(autoincrement())
  userId     Int                    @unique
  classId    Int?

  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  deletedAt  DateTime?

  user       User                   @relation("UserPupil", fields: [userId], references: [id], onDelete: Cascade)
  class      Class?                  @relation(fields: [classId], references: [id], onDelete: Restrict)
  marks      DisciplinePupilsMark[]
}

model Discipline {
  id          Int                   @id @default(autoincrement())
  name        String
  description String

  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  deletedAt   DateTime?

  teachers    TeachersDisciplines[]
  classes     ClassesDisciplines[]
  marks       DisciplinePupilsMark[]
}

model TeachersDisciplines {
  teacherId    Int
  disciplineId Int

  teacher    Teacher    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  discipline Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)

  @@id([teacherId, disciplineId])
}

model ClassesDisciplines {
  classId      Int
  disciplineId Int

  class      Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  discipline Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)

  @@id([classId, disciplineId])
}

model DisciplinePupilsMark {
  disciplineId Int
  pupilId      Int
  quarter      Int
  mark         Int

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  pupil        Pupil      @relation(fields: [pupilId], references: [id], onDelete: Cascade)

  @@id([disciplineId, pupilId, quarter])
  @@index([pupilId])
  @@index([quarter])
  @@index([pupilId, quarter])
}
